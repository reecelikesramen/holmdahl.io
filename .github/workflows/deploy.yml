name: Deploy to GitHub Pages

on:
  # Trigger the workflow every time you push to the `main` branch
  # Using a different branch name? Replace `main` with your branchâ€™s name
  push:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

# Allow this job to clone the repo and create a page deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # -----------------------------------------------------------------------------------
  # 1) Filter job: check if any of src/, public/, or resume.tex changed
  # -----------------------------------------------------------------------------------
  filter:
    name: Check for relevant changes
    runs-on: ubuntu-latest
    outputs:
      astro: ${{ steps.filter.outputs.astro }}
      resume: ${{ steps.filter.outputs.resume }}
      any: ${{ steps.filter.outputs.astro == 'true' || steps.filter.outputs.resume == 'true' }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes in src/, public/, or resume.tex
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            astro:
              - 'src/**'
              - 'public/**'
              - '.github/workflows/deploy.yml'
              - 'package.json'
              - 'astro.config.mjs'
              - 'tailwind.config.mjs'
            resume:
              - 'resume.tex'

  # -----------------------------------------------------------------------------------
  # 2) Build Astro site: runs only if src/ or public/ changed
  # -----------------------------------------------------------------------------------
  build-astro:
    name: Build Astro site
    needs: filter
    if: needs.filter.outputs.astro == 'true' || always()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4
      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: "latest"
          package_json_file: "package.json"
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
          cache-dependency-path: "pnpm-lock.yaml"
      - name: Install dependencies
        shell: bash
        run: pnpm install
      - name: Build Astro site
        shell: bash
        run: pnpm run build
      - name: Upload Astro build artifact
        uses: actions/upload-artifact@v4
        with:
          name: astro-dist
          path: ./dist

  # -----------------------------------------------------------------------------------
  # 3) Build resume: use cache to avoid rebuilding if resume.tex unchanged
  # -----------------------------------------------------------------------------------
  build-resume:
    name: Build resume (LaTeX)
    needs: filter
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Cache resume PDF
        id: cache-resume
        uses: actions/cache@v4
        with:
          path: resume.pdf
          key: resume-${{ hashFiles('resume.tex') }}

      - name: Build resume.tex
        if: steps.cache-resume.outputs.cache-hit != 'true'
        uses: xu-cheng/latex-action@v3
        with:
          root_file: resume.tex

      - name: Upload resume artifact
        uses: actions/upload-artifact@v4
        with:
          name: resume-pdf
          path: resume.pdf

  # -----------------------------------------------------------------------------------
  # 4) Deploy: runs if either build job completed
  # -----------------------------------------------------------------------------------
  deploy:
    name: Deploy to GitHub Pages
    needs: [filter, build-astro, build-resume]
    if: always() && needs.filter.outputs.any == 'true' && (needs.build-astro.result == 'success' || needs.build-astro.result == 'skipped') && (needs.build-resume.result == 'success' || needs.build-resume.result == 'skipped')
    runs-on: ubuntu-latest
    
    permissions:
      pages: write
      id-token: write
      contents: read
    
    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download Astro build
        uses: actions/download-artifact@v4
        with:
          name: astro-dist
          path: ./dist

      - name: Download resume
        uses: actions/download-artifact@v4
        with:
          name: resume-pdf
          path: ./dist

      # Upload Pages artifact
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
