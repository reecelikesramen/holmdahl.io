---
import type { ImageMetadata } from "astro";
import { Picture } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { marked } from 'marked';

interface Cover {
  image: ImageMetadata;
  alt: string;
  caption?: string;
}

interface Data {
  title: string;
  cover?: Cover;
  description?: string;
  pubDate?: Date;
  minutesRead?: number;
  showReadingTime?: boolean;
  tags?: string[];
  coverEffects?: boolean;
}

interface Props {
  data: Data;
  url: string;
  aboveTheFold?: boolean;
  showMetadata?: boolean;
}

const { data, url, aboveTheFold = false, showMetadata = true } = Astro.props;

// Process description with marked if it exists
const processedDescription = data.description ? marked(data.description, { 
  breaks: true,
  gfm: true 
}) : "";
---

<article
  class="relative mb-8 xs:mb-6 rounded-lg bg-entry-color border border-border-color transition-transform hover:scale-[1.01] overflow-hidden"
>
  <!-- Cover Image -->
  {
    data.cover && (
      <div class="p-3 xs:p-4 md:p-6">
        <Picture
          src={data.cover.image}
          alt={data.cover.alt}
          class={`w-full object-cover select-none pointer-events-none rounded-lg ${data.coverEffects ? 'shadow-sm aspect-[2/1]' : ''}`}
          draggable="false"
          loading={aboveTheFold ? "eager" : "lazy"}
          fetchpriority={aboveTheFold ? "high" : "auto"}
          widths={[400, 800, 1200]}
          sizes="(max-width: 640px) 400px, (max-width: 1024px) 800px, 1200px"
        />
      </div>
    )
  }

  <div class={`px-4 pb-4 pt-2 xs:p-6 ${data.coverEffects ? '' : '-mt-4 xs:-mt-10'}`}>
    <header>
      <h2
        class="flex items-center gap-2 mb-1 xs:my-1 text-lg xs:text-xl font-semibold text-primary-color leading-snug"
      >
        {data.title}
      </h2>
    </header>

    {
      processedDescription && (
        <div class="mb-2 xs:my-2 leading-relaxed text-secondary-color prose dark:prose-invert prose-sm md:prose-base prose-a:z-20 prose-a:relative prose-a:underline-offset-2 max-w-none">
          <Fragment set:html={processedDescription} />
        </div>
      )
    }

    {
      showMetadata && (
        <footer class="text-secondary-color text-sm leading-relaxed">
          {
            data.pubDate && (
              <span>
                {data.pubDate.toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                })}
              </span>
          )}
          {
            data.showReadingTime && data.minutesRead && (
              <span>&nbsp;·&nbsp;{data.minutesRead}</span>
            )
          }
          {
            data.tags && data.tags.length > 0 && (
              <span class="hidden xs:inline">
                &nbsp;·&nbsp;{data.tags.map((tag, i) => (
                  <span>
                    <a href={`/tags/${tag}`} class="relative z-20 text-secondary-color hover:no-underline hover:text-primary-color transition-colors">{tag}</a>{i < (data.tags?.length ?? 0) - 1 ? ", " : ""}
                  </span>
                ))}
              </span>
            )
          }
        </footer>
      )
    }
  </div>

  <a
    class="absolute inset-0 z-10"
    aria-label={`post link to ${data.title}`}
    href={url}></a>
</article>

