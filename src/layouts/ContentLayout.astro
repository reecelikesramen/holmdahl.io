---
import MainLayout from './MainLayout.astro';

interface Props {
  title?: string;
  description?: string;
  image?: string;
  pubDate?: Date;
  updatedDate?: Date;
  readingTime?: number;
  tags?: string[];
  draft?: boolean;
  hideTitle?: boolean;
  hideDescription?: boolean;
  hideImage?: boolean;
  hideMeta?: boolean;
  showToc?: boolean;
  showBreadcrumbs?: boolean;
  breadcrumbPath?: Array<{ title: string; url: string }>;
  prevPost?: {
    title: string;
    url: string;
  };
  nextPost?: {
    title: string;
    url: string;
  };
}

const { 
  title, 
  description, 
  image, 
  pubDate,
  updatedDate,
  readingTime,
  tags = [], 
  draft = false,
  hideTitle = false,
  hideDescription = false,
  hideImage = false,
  hideMeta = true,
  showToc = false,
  showBreadcrumbs = false,
  breadcrumbPath = [],
  prevPost,
  nextPost
} = Astro.props;

// Default breadcrumbs for posts if none provided
const defaultBreadcrumbs = showBreadcrumbs && breadcrumbPath.length === 0 ? [
  { title: 'Home', url: '/' },
  { title: 'Posts', url: '/posts' }
] : breadcrumbPath;
---

<MainLayout title={title || 'Content'} description={description} image={image}>
  <article class="content-single">
    {showBreadcrumbs && defaultBreadcrumbs.length > 0 && (
      <div class="breadcrumbs">
        {defaultBreadcrumbs.map((crumb, index) => (
          <>
            <a href={crumb.url} class="text-secondary-text hover:text-primary hover:underline no-underline text-sm">
              {crumb.title}
            </a>
            {index < defaultBreadcrumbs.length - 1 && (
              <span class="text-tertiary-text">&nbsp;»&nbsp;</span>
            )}
          </>
        ))}
      </div>
    )}

    {(!hideTitle || !hideDescription || (!hideMeta && (pubDate || updatedDate || readingTime || tags.length > 0))) && (
      <header class="content-header">
        {!hideTitle && title && (
          <h1 class="content-title">
            {title}
            {draft && (
              <span class="entry-hint" title="Draft">
                <svg xmlns="http://www.w3.org/2000/svg" height="35" viewBox="0 -960 960 960" fill="currentColor">
                  <path d="M160-410v-60h300v60H160Zm0-165v-60h470v60H160Zm0-165v-60h470v60H160Zm360 580v-123l221-220q9-9 20-13t22-4q12 0 23 4.5t20 13.5l37 37q9 9 13 20t4 22q0 11-4.5 22.5T862.09-380L643-160H520Zm300-263-37-37 37 37ZM580-220h38l121-122-18-19-19-18-122 121v38Zm141-141-19-18 37 37-18-19Z" />
                </svg>
              </span>
            )}
          </h1>
        )}
        
        {!hideDescription && description && (
          <div class="content-description">
            {description}
          </div>
        )}
        
        {!hideMeta && (pubDate || updatedDate || readingTime || tags.length > 0) && (
          <div class="content-meta">
            {pubDate && !isNaN(pubDate.getTime()) && (
              <span>
                {pubDate.toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                })}
              </span>
            )}
            
            {updatedDate && !isNaN(updatedDate.getTime()) && (
              <span>&nbsp;·&nbsp;Updated: {updatedDate.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              })}</span>
            )}
            
            {readingTime && (
              <span>&nbsp;·&nbsp;{readingTime} min read</span>
            )}
          </div>
        )}
      </header>
    )}

    <div class="post-content">
      <slot />
    </div>

    {(tags.length > 0 || prevPost || nextPost) && (
      <footer class="content-footer">
        {tags.length > 0 && (
          <ul class="content-tags">
            {tags.map(tag => (
              <li>
                <a href={`/tags/${tag.toLowerCase()}`}>
                  {tag}
                </a>
              </li>
            ))}
          </ul>
        )}
        
        {(prevPost || nextPost) && (
          <nav class="paginav">
            {prevPost && (
              <a class="prev" href={prevPost.url}>
                <span class="title">« Prev</span>
                <br>
                <span>{prevPost.title}</span>
              </a>
            )}
            
            {nextPost && (
              <a class="next" href={nextPost.url}>
                <span class="title">Next »</span>
                <br>
                <span>{nextPost.title}</span>
              </a>
            )}
          </nav>
        )}
      </footer>
    )}
  </article>
</MainLayout>

<script>
  // Add anchor links to headings, similar to Hugo PaperMod
  function addAnchorLinks() {
    const headings = document.querySelectorAll('.post-content h1[id], .post-content h2[id], .post-content h3[id], .post-content h4[id], .post-content h5[id], .post-content h6[id]');
    
    headings.forEach(heading => {
      const id = heading.getAttribute('id');
      if (!id) return;
      
      // Check if anchor already exists
      if (heading.querySelector('.anchor')) return;
      
      // Create the anchor link with CSS classes
      const anchor = document.createElement('a');
      anchor.className = 'anchor-link hidden';
      anchor.setAttribute('aria-hidden', 'true');
      anchor.setAttribute('href', `#${id}`);
      anchor.textContent = '#';
      
      // Add group class to heading for hover behavior
      heading.classList.add('group');
      
      // Show anchor on heading hover using classes
      heading.addEventListener('mouseenter', () => {
        anchor.classList.remove('hidden');
        anchor.setAttribute('aria-hidden', 'false');
      });
      
      heading.addEventListener('mouseleave', () => {
        anchor.classList.add('hidden');
        anchor.setAttribute('aria-hidden', 'true');
      });
      
      // Append the anchor to the heading
      heading.appendChild(anchor);
    });
  }

  // Smooth scroll for anchor links, similar to Hugo PaperMod
  function setupSmoothScroll() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (this: HTMLAnchorElement, e: Event) {
        e.preventDefault();
        const href = this.getAttribute('href');
        if (!href) return;
        
        const id = href.substring(1);
        const target = document.querySelector(`[id='${decodeURIComponent(id)}']`);
        
        if (!target) return;
        
        // Check for reduced motion preference
        const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        
        if (!prefersReducedMotion) {
          target.scrollIntoView({
            behavior: 'smooth'
          });
        } else {
          target.scrollIntoView();
        }
        
        // Update URL hash
        if (id === 'top') {
          history.replaceState({}, '', window.location.pathname + window.location.search);
        } else {
          history.pushState({}, '', `#${id}`);
        }
      });
    });
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      addAnchorLinks();
      setupSmoothScroll();
    });
  } else {
    addAnchorLinks();
    setupSmoothScroll();
  }
</script>

<style>
  @reference "../styles/global.css";

  /* Minimal component-specific styles - most moved to global.css */
  .entry-hint {
    @apply inline-block ml-2 text-base;
  }

  /* Anchor link styles to match current working inline styles */
  :global(.post-content .anchor-link) {
    @apply text-muted-foreground select-none transition-all duration-200 ease-out relative no-underline decoration-2 hover:underline hover:brightness-105 dark:hover:brightness-108; 
  }

  :global(.post-content h1 .anchor-link) {
    @apply ml-4
  }
  :global(.post-content h2 .anchor-link) {
    @apply ml-3
  }

  :global(.post-content h3 .anchor-link) {
    @apply ml-1.5
  }

  :global(.post-content h4 .anchor-link),
  :global(.post-content h5 .anchor-link),
  :global(.post-content h6 .anchor-link) {
    @apply ml-1
  }
  
</style> 