---
import MainLayout from './MainLayout.astro';
import { Picture } from 'astro:assets';
import TableOfContents from '@/components/TableOfContents.astro';
import Prose from '@/components/Prose.astro';
import { marked } from 'marked';

interface Data {
    title: string;
    description?: string;
    cover?: {
      image: ImageMetadata;
      alt: string;
      caption?: string;
    };
    pubDate?: Date;
    updatedDate?: Date;
    minutesRead?: string;
    tags?: string[];
    showTitle?: boolean;
    showDescription?: boolean;
    showCover?: boolean;
    showPubDate?: boolean;
    showUpdatedDate?: boolean;
    showReadingTime?: boolean;
    showTags?: boolean;
    showToc?: boolean;
    tocOpen?: boolean;
    coverEffects?: boolean;
}

interface Props {
  frontmatter: Data;
  headings: { depth: number; text: string; slug: string }[];
}

const { frontmatter, headings } = Astro.props;

const {
  title,
  description = "",
  cover,
  pubDate,
  updatedDate,
  minutesRead,
  tags,
  showTitle = true,
  showDescription = true,
  showCover = true,
  showPubDate = true,
  showUpdatedDate = true,
  showReadingTime = true,
  showTags = true,
  showToc = false,
  tocOpen = false,
  coverEffects = true,
} = frontmatter;

// Process description with marked if it exists
const processedDescription = description ? marked(description, { 
  breaks: true,
  gfm: true 
}) : "";
---

<MainLayout title={title || 'Content'} description={description}>
  <article class="w-full max-w-3xl mx-auto px-4 md:px-6 mb-12 md:mb-16">
    {/* Title */}
    {showTitle && title && (
      <header class="mt-3 mb-2 md:mt-6 md:mb-5 mx-auto">
        <h1 class="mb-0.5 text-3xl md:text-5xl font-bold leading-tight text-content-color">
          {title}
        </h1>
      </header>
    )}
    
    {/* Description */}
    {showDescription && processedDescription && (
      <div class="mt-2 mb-1 md:mt-2.5 md:mb-1.5 text-secondary-color prose dark:prose-invert prose-sm md:prose-base prose-a:underline-offset-2 max-w-none">
        <Fragment set:html={processedDescription} />
      </div>
    )}

    {/* Meta information - date, author, read time */}
      <div class="flex flex-col xs:flex-row xs:flex-wrap items-center mb-6 md:mb-8 text-xs md:text-sm text-secondary-color">
        {showPubDate && pubDate && !isNaN(pubDate.getTime()) && (
          <span class="xs:after:content-['·'] xs:after:mx-1 md:after:mx-2 last:after:content-none">
            {pubDate.toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })}
          </span>
        )}
        
        {showUpdatedDate && updatedDate && !isNaN(updatedDate.getTime()) && (
          <span class="xs:after:content-['·'] xs:after:mx-1 md:after:mx-2 last:after:content-none">Updated: {updatedDate.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
          })}</span>
        )}
        
        {showReadingTime && minutesRead && (
          <span class="xs:after:content-['·'] xs:after:mx-1 md:after:mx-2 last:after:content-none">{minutesRead}</span>
        )}
      </div>

    {/* Cover Image */}
    {showCover && cover && (
      <div class="-mx-4 md:-mx-6 mb-6 md:mb-8">
        <Picture
          src={cover.image}
          alt={cover.alt}
          width={800}
          class:list={[
            "w-full h-auto rounded-lg object-cover mb-4",
            {
              "shadow-sm aspect-[2/1]": coverEffects
            }
          ]}
          formats={['avif', 'webp']}
          densities={[1, 1.5, 2]}
          fallbackFormat="jpg"
          loading="eager"
          fetchpriority="high"
        />
        {/* Cover Image Caption */}
        {cover.caption && (
          <span class="px-4 md:px-6 mt-2 text-center text-sm text-secondary-text block w-full">
            {cover.caption}
          </span>
        )}
      </div>
    )}

    {/* Table of Contents */}
    {showToc && headings && headings.length > 0 && (
      <TableOfContents headings={headings} isOpen={tocOpen} />
    )}

    {/* Post Content */}
    <Prose>
      <slot />
    </Prose>

    {(tags && tags.length > 0) && (
      <footer class="mt-8 md:mt-14">
        {tags.length > 0 && (
          <ul class="flex flex-wrap gap-1.5 md:gap-2.5 list-none p-0 mb-3 md:mb-5">
            {tags.map((tag: string) => (
              <li class="inline-block">
                <a href={`/tags/${tag.toLowerCase()}`} class="px-2 md:px-3.5 text-xs md:text-sm leading-7 md:leading-9 rounded-lg border no-underline text-secondary-color bg-code-bg-color border-border-color hover:bg-border-color min-h-11 flex items-center justify-center">
                  {tag}
                </a>
              </li>
            ))}
          </ul>
        )}
      </footer>
    )}
  </article>
</MainLayout>

<script>
  // Smooth scroll for anchor links
  function setupSmoothScroll() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      // Add aria-label to the anchor link
      const href = anchor.getAttribute('href');
      if (href) {
        const id = href.substring(1);
        const target = document.querySelector(`[id='${decodeURIComponent(id)}']`);
        if (target) {
          const headingText = target.textContent?.trim() || 'section';
          anchor.setAttribute('aria-label', `Link to ${headingText}`);
        }
      }

      anchor.addEventListener('click', function (this: HTMLAnchorElement, e: Event) {
        e.preventDefault();
        const href = this.getAttribute('href');
        if (!href) return;
        
        const id = href.substring(1);
        const target = document.querySelector(`[id='${decodeURIComponent(id)}']`);
        
        if (!target) return;
        
        // Check for reduced motion preference
        const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        
        if (!prefersReducedMotion) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        } else {
          target.scrollIntoView();
        }
        
        // Update URL hash
        if (id === 'top') {
          history.replaceState({}, '', window.location.pathname + window.location.search);
        } else {
          history.pushState({}, '', `#${id}`);
        }
      });
    });
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      setupSmoothScroll();
    });
  } else {
    setupSmoothScroll();
  }
</script>

<style is:global>
  @reference "@/styles/critical.css";
  
  /* Anchor link icon styles for headings - responsive to prose size and heading level */
  .icon.icon-link {
    @apply transition-opacity duration-150 ease-in-out inline-block align-top;
    /* Hide by default on fine pointer devices (desktop), always show on coarse pointer devices (touch) */
    @apply pointer-fine:opacity-0 pointer-coarse:opacity-100;
    /* Base size responsive to prose scale */
    @apply w-3 h-3 ml-1;
    /* Medium prose size */
    @apply md:w-4 md:h-4 md:ml-2;
    /* Large prose size */
    @apply lg:w-5 lg:h-5 lg:ml-2;
  }
  
  /* H1 specific sizing - largest headings get larger icons */
  h1 .icon.icon-link {
    @apply w-4 h-4 ml-2;
    @apply md:w-5 md:h-5 md:ml-3;
    @apply lg:w-6 lg:h-6 lg:ml-3;
  }
  
  /* H2 specific sizing */
  h2 .icon.icon-link {
    @apply w-3.5 h-3.5 ml-1.5;
    @apply md:w-4 md:h-4 md:ml-2;
    @apply lg:w-5 lg:h-5 lg:ml-2.5;
  }
  
  /* H3 specific sizing */
  h3 .icon.icon-link {
    @apply w-3 h-3 ml-1;
    @apply md:w-3.5 md:h-3.5 md:ml-1.5;
    @apply lg:w-4 lg:h-4 lg:ml-2;
  }
  
  /* H4-H6 specific sizing - smaller headings get smaller icons */
  h4 .icon.icon-link,
  h5 .icon.icon-link,
  h6 .icon.icon-link {
    @apply w-2.5 h-2.5 ml-1;
    @apply md:w-3 md:h-3 md:ml-1;
    @apply lg:w-3.5 lg:h-3.5 lg:ml-1.5;
  }
  
  /* Show anchor icons on heading hover - only for fine pointer devices (desktop) */
  h1:hover .icon.icon-link,
  h2:hover .icon.icon-link,
  h3:hover .icon.icon-link,
  h4:hover .icon.icon-link,
  h5:hover .icon.icon-link,
  h6:hover .icon.icon-link {
    @apply pointer-fine:opacity-100;
  }
  

  
  /* Starlight-style chain link icon using SVG - responsive sizing */
  .icon.icon-link::before {
    @apply inline-block bg-no-repeat bg-contain bg-center content-[''];
    /* Size matches the parent icon container */
    @apply w-full h-full;
    /* Use a black SVG and filter it to desired colors */
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23000000' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71'/%3E%3Cpath d='M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71'/%3E%3C/svg%3E");
    /* Filter to match theme colors - adjust brightness/contrast for your theme */
    @apply brightness-0 contrast-100;
    /* Add transition for smooth color changes */
    @apply transition-all duration-150 ease-in-out;
  }
  
  /* Color variations using filters */
  .icon.icon-link:hover::before {
    /* Lighter color on hover - adjust values as needed */
    @apply brightness-50 contrast-150;
  }
  
  /* Dark mode support */
  .dark .icon.icon-link::before {
    /* Invert for dark mode */
    @apply brightness-0 invert;
  }
  
  .dark .icon.icon-link:hover::before {
    /* Slightly dimmed on hover in dark mode */
    @apply brightness-0 invert contrast-75;
  }
</style>