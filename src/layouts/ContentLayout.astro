---
import '../styles/post-content.css';
import MainLayout from './MainLayout.astro';
import { Picture } from 'astro:assets';
import TableOfContents from '../components/TableOfContents.astro';
import type { CollectionEntry } from 'astro:content';

type Headings = {}

const props = Astro.props;
const data: CollectionEntry<"posts">['data'] = props.frontmatter;
const headings: { depth: number; text: string; slug: string }[] = props.headings;
---

<MainLayout title={data.title || 'Content'} description={data.description}>
  <article class="content-single">
    {/* Title */}
    {data.showTitle && data.title && (
      <header class="content-header">
        <h1 class="content-title">
          {data.title}
          {data.draft && (
            <span class="inline-block ml-2 text-base" title="Draft">
              <svg xmlns="http://www.w3.org/2000/svg" height="35" viewBox="0 -960 960 960" fill="currentColor">
                <path d="M160-410v-60h300v60H160Zm0-165v-60h470v60H160Zm0-165v-60h470v60H160Zm360 580v-123l221-220q9-9 20-13t22-4q12 0 23 4.5t20 13.5l37 37q9 9 13 20t4 22q0 11-4.5 22.5T862.09-380L643-160H520Zm300-263-37-37 37 37ZM580-220h38l121-122-18-19-19-18-122 121v38Zm141-141-19-18 37 37-18-19Z" />
              </svg>
            </span>
          )}
        </h1>
      </header>
    )}
    
    {/* Description */}
    {data.showDescription && data.description && (
      <div class="content-description mb-4">
        {data.description}
      </div>
    )}

    {/* Meta information - date, author, read time */}
      <div class="content-meta mb-6">
        {data.showPubDate && data.pubDate && !isNaN(data.pubDate.getTime()) && (
          <span>
            {data.pubDate.toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })}
          </span>
        )}
        
        {data.showUpdatedDate && data.updatedDate && !isNaN(data.updatedDate.getTime()) && (
          <span>&nbsp;·&nbsp;Updated: {data.updatedDate.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
          })}</span>
        )}
        
        {data.showReadingTime && data.readingTime && (
          <span>&nbsp;·&nbsp;{data.readingTime} min read</span>
        )}
      </div>

    {/* Cover Image */}
    {data.showCover && data.cover && (
      <div class="cover-image-container mb-6 md:mb-8">
        <Picture
          src={data.cover.image}
          alt={data.cover.alt}
          width={800}
          height={400}
          class="cover-image w-full h-auto rounded-lg"
          formats={['avif', 'webp']}
          densities={[1, 1.5, 2]}
          fallbackFormat="jpg"
          loading="eager"
          fetchpriority="high"
        />
        {/* Cover Image Caption */}
        {data.cover.caption && (
          <figcaption class="cover-caption mt-2 text-center text-sm text-secondary-text">
            {data.cover.caption}
          </figcaption>
        )}
      </div>
    )}

    {/* Table of Contents */}
    {data.showToc && headings && headings.length > 0 && (
      <TableOfContents headings={headings} isOpen={data.tocOpen} />
    )}

    {/* Post Content */}
    <div class="post-content">
      <slot />
    </div>

    {(data.tags && data.tags.length > 0) && (
      <footer class="content-footer">
        {data.tags.length > 0 && (
          <ul class="content-tags">
            {data.tags.map((tag: string) => (
              <li>
                <a href={`/tags/${tag.toLowerCase()}`}>
                  {tag}
                </a>
              </li>
            ))}
          </ul>
        )}
      </footer>
    )}
  </article>
</MainLayout>

<script>
  // Add anchor links to headings, similar to Hugo PaperMod
  function addAnchorLinks() {
    const headings = document.querySelectorAll('.post-content h1[id], .post-content h2[id], .post-content h3[id], .post-content h4[id], .post-content h5[id], .post-content h6[id]');
    
    headings.forEach(heading => {
      const id = heading.getAttribute('id');
      if (!id) return;
      
      // Check if anchor already exists
      if (heading.querySelector('.anchor')) return;
      
      // Create the anchor link with CSS classes
      const anchor = document.createElement('a');
      anchor.className = 'anchor-link hidden';
      anchor.setAttribute('aria-hidden', 'true');
      anchor.setAttribute('href', `#${id}`);
      anchor.textContent = '#';
      
      // Add group class to heading for hover behavior
      heading.classList.add('group');
      
      // Show anchor on heading hover using classes
      heading.addEventListener('mouseenter', () => {
        anchor.classList.remove('hidden');
        anchor.setAttribute('aria-hidden', 'false');
      });
      
      heading.addEventListener('mouseleave', () => {
        anchor.classList.add('hidden');
        anchor.setAttribute('aria-hidden', 'true');
      });
      
      // Append the anchor to the heading
      heading.appendChild(anchor);
    });
  }

  // Smooth scroll for anchor links, similar to Hugo PaperMod
  function setupSmoothScroll() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (this: HTMLAnchorElement, e: Event) {
        e.preventDefault();
        const href = this.getAttribute('href');
        if (!href) return;
        
        const id = href.substring(1);
        const target = document.querySelector(`[id='${decodeURIComponent(id)}']`);
        
        if (!target) return;
        
        // Check for reduced motion preference
        const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        
        if (!prefersReducedMotion) {
          target.scrollIntoView({
            behavior: 'smooth'
          });
        } else {
          target.scrollIntoView();
        }
        
        // Update URL hash
        if (id === 'top') {
          history.replaceState({}, '', window.location.pathname + window.location.search);
        } else {
          history.pushState({}, '', `#${id}`);
        }
      });
    });
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      addAnchorLinks();
      setupSmoothScroll();
    });
  } else {
    addAnchorLinks();
    setupSmoothScroll();
  }
</script>

<style>
  @reference "../styles/critical.css";
  /* Cover image styles */
  .cover-image-container {
    @apply -mx-4 md:-mx-6;
  }
  
  .cover-image {
    @apply shadow-sm;
    aspect-ratio: 2 / 1;
    object-fit: cover;
  }
  
  .cover-caption {
    @apply px-4 md:px-6;
  }

  /* Anchor link styles to match current working inline styles */
  :global(.post-content .anchor-link) {
    @apply text-muted-foreground select-none transition-all duration-200 ease-out relative no-underline decoration-2 hover:underline hover:brightness-105 dark:hover:brightness-108; 
  }

  :global(.post-content h1 .anchor-link) {
    @apply ml-4
  }
  :global(.post-content h2 .anchor-link) {
    @apply ml-3
  }

  :global(.post-content h3 .anchor-link) {
    @apply ml-1.5
  }

  :global(.post-content h4 .anchor-link),
  :global(.post-content h5 .anchor-link),
  :global(.post-content h6 .anchor-link) {
    @apply ml-1
  }
  
</style> 